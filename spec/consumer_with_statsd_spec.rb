require_relative "spec_helper"
require_relative "support/queue_helpers"

describe Consumer do
  include QueueHelpers

  let(:logger) { instance_double("Logger") }
  let(:delivery_info) do
    instance_double("Bunny::DeliveryInfo",
                    channel: instance_double("Bunny::Channel", reject: nil),
                    delivery_tag: nil)
  end
  let(:headers) { instance_double("Bunny::MessageProperties", content_type: "application/json") }
  let(:statsd_client_mock) do
    Class.new do
      attr_reader :incremented_keys

      def initialize
        @incremented_keys = []
      end

      def increment(key)
        @incremented_keys << key
      end
    end
  end

  describe "#run" do
    it "increments the counters on the statsd client" do
      statsd_client = statsd_client_mock.new
      stubs = create_bunny_stubs
      queue = stubs.queue

      expect(queue).to receive(:subscribe).and_yield(delivery_info, headers, "message_payload")

      processor = instance_double("HeartbeatProcessor")
      described_class.new(
        queue_name: "some-queue",
        processor: processor,
        rabbitmq_connection: stubs.connection,
        statsd_client: statsd_client,
        logger: logger,
      ).run

      expect(statsd_client.incremented_keys).to eql(["some-queue.started", "some-queue.discarded"])
    end

    it "increments the uncaught_exception counter for uncaught exceptions" do
      statsd_client = statsd_client_mock.new
      stubs = create_bunny_stubs
      queue = stubs.queue

      expect(queue).to receive(:subscribe).and_yield(delivery_info, headers, {}.to_json)

      processor = instance_double("HeartbeatProcessor")
      allow(processor).to receive(:process).and_raise("An expected exception generated by the test")
      expect(logger).to receive(:error)

      expect {
        described_class.new(queue_name: "some-queue", processor: processor, rabbitmq_connection: stubs.connection, statsd_client: statsd_client, logger: logger).run
      }.to raise_error(SystemExit)

      expect(statsd_client.incremented_keys).to eql(["some-queue.started", "some-queue.uncaught_exception"])
    end
  end
end
